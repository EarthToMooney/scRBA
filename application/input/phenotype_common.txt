* Parameters define in this file will overwrite ones define in GAMS runRBA.gms file
* check runRBA_GAMS_settings.txt for additional settings (e.g., file paths)

* included in model-version-settings:
* NGAM (N-lim and C-lim chemostats using glucose)
* max_allowed_mito_proteome_allo_fraction
* nonmodeled_proteome_allocation
$setGlobal gms_path ../../input/GAMS_model_application/
*$include %gms_path%model-version-settings.txt
$include ../../../pycore/binary_search/model-version-settings.txt

* file with settings updated by build_model scripts, to help with managing multiple GSM models

$setGlobal kribonuc (6.6+7.6)*3600
$setGlobal kribomito (6.6+5.6)*3600

* extra dummy protein for 0.3% of proteome not identified in measurements
*Equation dummyUnidentified; dummyUnidentified.. v('PROSYN-PROTDUMMYUNIDENTIFIED') =e= 0.003 * v('BIOSYN-PROTTOBIO');

* Substrate and oxygenation
v.fx('RXN-EX_glc__D_e_FWD-SPONT') = 0 * %nscale%;
* MFA o2 uptake (mu=0.38) = ~15; o2 uptake at glc uptake of 10, maximizing growth (mu=0.8 for GSM model) = ~26
*v.up('RXN-EX_o2_e_REV-SPONT') = (15.9684414) * %nscale%;
v.up('RXN-EX_o2_e_REV-SPONT') = (26.25403530509562) * %nscale%;
v.fx('RXN-EX_o2_e_FWD-SPONT') = 0 * %nscale%;

* Turn off forming incomplete functional enzyme (to prevent cheap incomplete complex from being formed)
*$include ./incomplete_enzyme_complex_off.txt

* force relative abundances of proteins to match kapp calculations
* If needed, could also try forcing PROWASTE to match, since it's off by default
$setGlobal prosynSlackAllow 1e4 * %nscale%
* minProsynSlack = 1 if you want to minimize deviations from the measured proteome before finding the highest yields, 
** 0 otherwise
$setGlobal minProsynSlack 1
*Parameters
*prosyn_for_kapps(j)
*$include "%model_root_path%parameterization/kapp/datasets/Rabinowitz2023_batchGlc_using_MFA_and_scRBA_methods/min_flux_violation/test.prosyn_frac_unscaled.txt"
*$include "%model_root_path%parameterization/kapp/datasets/Rabinowitz2023_batchGlc_using_MFA_and_scRBA_methods/min_flux_violation/test.prosyn_unscaled.txt"
;
Variables prosynSlackSum, prosynSlackUB(j), prosynSlackLB(j)
;
prosynSlackLB.lo(j) = 0; prosynSlackLB.up(j) = inf;
prosynSlackUB.lo(j) = 0; prosynSlackUB.up(j) = inf;

$setGlobal biom_id_default 'BIOSYN-BIODILAERO'
$setGlobal mu_0 0.38
* force relative abundances of proteins to match kapp calculations
*Equations proSynKapp(j); proSynKapp(j)$(prosyn_for_kapps(j) > 0).. v(j) - prosynSlackLB(j) + prosynSlackUB(j) =e= v('%biom_id_default%') * prosyn_for_kapps(j) / (%mu_0%);
*Equations proSynKapp(j); proSynKapp(j)$(prosyn_for_kapps(j) > 0).. v(j) - prosynSlackLB(j) + prosynSlackUB(j) =e= v('%biom_id_default%') * prosyn_for_kapps(j) / (%mu_0% * %nscale%);
*Equations proSynKappUB(j); proSynKappUB(j)$(prosyn_for_kapps(j) > 0).. v(j) - prosynSlackUB(j) =l= v('%biom_id_default%') * prosyn_for_kapps(j) / %mu_0%;
*Equations proSynKappLB(j); proSynKappLB(j)$(prosyn_for_kapps(j) > 0).. v(j) + prosynSlackLB(j) =g= v('%biom_id_default%') * prosyn_for_kapps(j) / %mu_0%;
*Equations proSynKappUB(j); proSynKappUB(j)$(prosyn_for_kapps(j) > 0).. v(j) - prosynSlackUB(j) =l= v('BIOSYN-PROTTOBIO') * prosyn_for_kapps(j);
*Equations proSynKappLB(j); proSynKappLB(j)$(prosyn_for_kapps(j) > 0).. v(j) + prosynSlackLB(j) =g= v('BIOSYN-PROTTOBIO') * prosyn_for_kapps(j);
Equation PSS; PSS.. prosynSlackSum =e= sum(j, prosynSlackLB(j) + prosynSlackUB(j));

* kapp updates
$setGlobal default_kapp 35984.09696387159 
parameters kapp_backup(j)
$include %model_root_path%parameterization/kapp/datasets/Shen2024_batchGlc_with_MFA/kapps_RBA.txt
;

* kapp(j)$(kapp(j) eq 0) = 339;
* kapp(j)$(kapp(j) eq 0) = 0;
* kapp(j)$(kapp(j) eq 0) = 1e11;

* kapp set to RT maximum, rounded down
*kapp('RXN-FRUtps_e_FWD-YOL156W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YEL069C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YDR342C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YNR072W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YDR343C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YJR158W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YHR092C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YDR345C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YJL214W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YMR011W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YHR094C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YHR096C') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YFL011W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YJL219W') = 5611787.457;
*kapp('RXN-FRUtps_e_FWD-YDL245C') = 5611787.457;

* set kapps of rxns if needed
set kapps_to_update(j)
/
'RXN-FECRq6_m_FWD-FECRq6CPLX'
'RXN-SUCR_e_FWD-YIL162W'
'RXN-lumpFACS180_c_FWD-FAS12'
'RXN-C4STMO2_c_FWD-YGR060W'
'RXN-ACOADS160_rm_FWD-YGL055W'
'RXN-SQLEy_r_FWD-YGR175C'
'RXN-3OACE220_rm_FWD-YCR034W'
'RXN-3HACD220_rm_FWD-YJL097W'
'RXN-C3STDH2_c_FWD-YGL001C'
'RXN-3OACR200_rm_FWD-YBR159W'
'RXN-3OACR220_rm_FWD-YBR159W'
'RXN-C3STKR1_c_FWD-YLR100W'
'RXN-LNSTLS_c_FWD-YHR072W'
'RXN-SQLS_c_FWD-YHR190W'
'RXN-3HACD200_rm_FWD-YJL097W'
'RXN-C4STMO3_c_FWD-YGR060W'
'RXN-GMPS2_c_FWD-YMR217W'
'RXN-NDPK8_c_FWD-YKL067W'
'RXN-C4STMO1_c_FWD-YGR060W'
'RXN-3OACE200_rm_FWD-YLR372W'
'RXN-C3STDH1_c_FWD-YGL001C'
'RXN-3HACD240_rm_FWD-YJL097W'
'RXN-C3STKR2_c_FWD-YLR100W'
'RXN-C4STMO4_c_FWD-YGR060W'
'RXN-ECOAR220_rm_FWD-YDL015C'
'RXN-C14STR_c_FWD-YNL280C'
'RXN-ECOAR200_rm_FWD-YDL015C'
'RXN-3OACR240_rm_FWD-YBR159W'
'RXN-ECOAR240_rm_FWD-YDL015C'
'RXN-LNS14DMy_c_FWD-ERG11NCP1'
'RXN-FRUtps_e_FWD-YDR342C'
'RXN-FRUtps_e_FWD-YDR345C'
'RXN-FRUtps_e_FWD-YHR092C'
'RXN-FRUtps_e_FWD-YHR094C'
'RXN-FRUtps_e_FWD-YMR011W'
'RXN-HEX7_c_FWD-YGL253W'
'RXN-HEX7_c_FWD-YLR446W'
'RXN-HEX7_c_FWD-YFR053C'
/
;

file log /''/;

* set kapp to default if not found, and to value from end of kapp calculations (i.e., min (isozyme kapps, default kapp)) otherwise
loop(kapps_to_update(j),
	if (kapp(j) eq 0,
		if (kapp_backup(j) eq 0,
			kapp(j) = %default_kapp%;
		else
			kapp(j) = kapp_backup(j);
			put log; put j.tl/; putclose;
			);
		);
	);
